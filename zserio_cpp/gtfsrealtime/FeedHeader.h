/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_FEED_HEADER_H
#define GTFSREALTIME_FEED_HEADER_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <gtfsrealtime/Incrementality.h>

namespace gtfsrealtime
{

class FeedHeader
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit FeedHeader(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_gtfs_realtime_version,
            typename ZSERIO_T_timestamp,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_gtfs_realtime_version, FeedHeader, allocator_type> = 0>
    FeedHeader(
            ZSERIO_T_gtfs_realtime_version&& gtfs_realtime_version_,
            ::gtfsrealtime::Incrementality incrementality_,
            ZSERIO_T_timestamp&& timestamp_,
            const allocator_type& allocator = allocator_type()) :
            FeedHeader(allocator)
    {
        m_gtfs_realtime_version_ = ::std::forward<ZSERIO_T_gtfs_realtime_version>(gtfs_realtime_version_);
        m_incrementality_ = incrementality_;
        m_timestamp_ = ::std::forward<ZSERIO_T_timestamp>(timestamp_);
    }

    explicit FeedHeader(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit FeedHeader(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~FeedHeader() = default;

    FeedHeader(const FeedHeader&) = default;
    FeedHeader& operator=(const FeedHeader&) = default;

    FeedHeader(FeedHeader&&) = default;
    FeedHeader& operator=(FeedHeader&&) = default;

    FeedHeader(::zserio::PropagateAllocatorT,
            const FeedHeader& other, const allocator_type& allocator);

    const ::zserio::string<>& getGtfs_realtime_version() const;
    ::zserio::string<>& getGtfs_realtime_version();
    void setGtfs_realtime_version(const ::zserio::string<>& gtfs_realtime_version_);
    void setGtfs_realtime_version(::zserio::string<>&& gtfs_realtime_version_);

    ::gtfsrealtime::Incrementality getIncrementality() const;
    void setIncrementality(::gtfsrealtime::Incrementality incrementality_);

    uint64_t getTimestamp() const;
    void setTimestamp(uint64_t timestamp_);
    bool isTimestampUsed() const;
    bool isTimestampSet() const;
    void resetTimestamp();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const FeedHeader& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readGtfs_realtime_version(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::gtfsrealtime::Incrementality readIncrementality(::zserio::BitStreamReader& in);
    ::gtfsrealtime::Incrementality readIncrementality(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readTimestamp(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readTimestamp(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);

    ::zserio::string<> m_gtfs_realtime_version_;
    ::gtfsrealtime::Incrementality m_incrementality_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_timestamp_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_FEED_HEADER_H
