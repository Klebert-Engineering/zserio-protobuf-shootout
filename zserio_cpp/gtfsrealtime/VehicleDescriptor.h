/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_VEHICLE_DESCRIPTOR_H
#define GTFSREALTIME_VEHICLE_DESCRIPTOR_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

namespace gtfsrealtime
{

class VehicleDescriptor
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit VehicleDescriptor(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_id,
            typename ZSERIO_T_label,
            typename ZSERIO_T_license_plate,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, VehicleDescriptor, allocator_type> = 0>
    VehicleDescriptor(
            ZSERIO_T_id&& id_,
            ZSERIO_T_label&& label_,
            ZSERIO_T_license_plate&& license_plate_,
            const allocator_type& allocator = allocator_type()) :
            VehicleDescriptor(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_label_ = ::std::forward<ZSERIO_T_label>(label_);
        m_license_plate_ = ::std::forward<ZSERIO_T_license_plate>(license_plate_);
    }

    explicit VehicleDescriptor(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit VehicleDescriptor(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleDescriptor() = default;

    VehicleDescriptor(const VehicleDescriptor&) = default;
    VehicleDescriptor& operator=(const VehicleDescriptor&) = default;

    VehicleDescriptor(VehicleDescriptor&&) = default;
    VehicleDescriptor& operator=(VehicleDescriptor&&) = default;

    VehicleDescriptor(::zserio::PropagateAllocatorT,
            const VehicleDescriptor& other, const allocator_type& allocator);

    const ::zserio::string<>& getId() const;
    ::zserio::string<>& getId();
    void setId(const ::zserio::string<>& id_);
    void setId(::zserio::string<>&& id_);
    bool isIdUsed() const;
    bool isIdSet() const;
    void resetId();

    const ::zserio::string<>& getLabel() const;
    ::zserio::string<>& getLabel();
    void setLabel(const ::zserio::string<>& label_);
    void setLabel(::zserio::string<>&& label_);
    bool isLabelUsed() const;
    bool isLabelSet() const;
    void resetLabel();

    const ::zserio::string<>& getLicense_plate() const;
    ::zserio::string<>& getLicense_plate();
    void setLicense_plate(const ::zserio::string<>& license_plate_);
    void setLicense_plate(::zserio::string<>&& license_plate_);
    bool isLicense_plateUsed() const;
    bool isLicense_plateSet() const;
    void resetLicense_plate();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const VehicleDescriptor& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readLabel(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readLicense_plate(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_id_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_label_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_license_plate_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_VEHICLE_DESCRIPTOR_H
