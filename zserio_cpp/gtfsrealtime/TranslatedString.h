/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_TRANSLATED_STRING_H
#define GTFSREALTIME_TRANSLATED_STRING_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <gtfsrealtime/Translation.h>

namespace gtfsrealtime
{

class TranslatedString
{
private:
    class ZserioElementFactory_translation
    {
    public:
        explicit ZserioElementFactory_translation(TranslatedString& owner);

        void create(::zserio::vector<::gtfsrealtime::Translation>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

        void create(::zserio::PackingContextNode& contextNode,
                ::zserio::vector<::gtfsrealtime::Translation>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

    private:
        std::reference_wrapper<TranslatedString> m_ownerRef;
    };

    using ZserioArrayType_translation = ::zserio::Array<::zserio::vector<::gtfsrealtime::Translation>, ::zserio::ObjectArrayTraits<::gtfsrealtime::Translation, ZserioElementFactory_translation>, ::zserio::ArrayType::AUTO>;

public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit TranslatedString(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_translation,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_translation, TranslatedString, allocator_type> = 0>
    explicit TranslatedString(
            ZSERIO_T_translation&& translation_,
            const allocator_type& allocator = allocator_type()) :
            TranslatedString(allocator)
    {
        m_translation_ = ZserioArrayType_translation(::std::forward<ZSERIO_T_translation>(translation_), ::zserio::ObjectArrayTraits<::gtfsrealtime::Translation, ZserioElementFactory_translation>());
    }

    explicit TranslatedString(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TranslatedString(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TranslatedString() = default;

    TranslatedString(const TranslatedString&) = default;
    TranslatedString& operator=(const TranslatedString&) = default;

    TranslatedString(TranslatedString&&) = default;
    TranslatedString& operator=(TranslatedString&&) = default;

    TranslatedString(::zserio::PropagateAllocatorT,
            const TranslatedString& other, const allocator_type& allocator);

    const ::zserio::vector<::gtfsrealtime::Translation>& getTranslation() const;
    ::zserio::vector<::gtfsrealtime::Translation>& getTranslation();
    void setTranslation(const ::zserio::vector<::gtfsrealtime::Translation>& translation_);
    void setTranslation(::zserio::vector<::gtfsrealtime::Translation>&& translation_);

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const TranslatedString& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ZserioArrayType_translation readTranslation(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_translation readTranslation(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_translation m_translation_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_TRANSLATED_STRING_H
