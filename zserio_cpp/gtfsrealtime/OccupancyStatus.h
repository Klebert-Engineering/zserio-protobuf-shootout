/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_OCCUPANCY_STATUS_H
#define GTFSREALTIME_OCCUPANCY_STATUS_H

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace gtfsrealtime
{

enum class OccupancyStatus : uint8_t
{
    EMPTY = UINT8_C(0),
    MANY_SEATS_AVAILABLE = UINT8_C(1),
    FEW_SEATS_AVAILABLE = UINT8_C(2),
    STANDING_ROOM_ONLY = UINT8_C(3),
    CRUSHED_STANDING_ROOM_ONLY = UINT8_C(4),
    FULL = UINT8_C(5),
    NOT_ACCEPTING_PASSENGERS = UINT8_C(6)
};

} // namespace gtfsrealtime

namespace zserio
{

// This is full specialization of enumeration traits and methods for OccupancyStatus enumeration.
template <>
struct EnumTraits<::gtfsrealtime::OccupancyStatus>
{
    static constexpr ::std::array<const char*, 7> names =
    {{
        "EMPTY",
        "MANY_SEATS_AVAILABLE",
        "FEW_SEATS_AVAILABLE",
        "STANDING_ROOM_ONLY",
        "CRUSHED_STANDING_ROOM_ONLY",
        "FULL",
        "NOT_ACCEPTING_PASSENGERS"
    }};

    static constexpr ::std::array<::gtfsrealtime::OccupancyStatus, 7> values =
    {{
        ::gtfsrealtime::OccupancyStatus::EMPTY,
        ::gtfsrealtime::OccupancyStatus::MANY_SEATS_AVAILABLE,
        ::gtfsrealtime::OccupancyStatus::FEW_SEATS_AVAILABLE,
        ::gtfsrealtime::OccupancyStatus::STANDING_ROOM_ONLY,
        ::gtfsrealtime::OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY,
        ::gtfsrealtime::OccupancyStatus::FULL,
        ::gtfsrealtime::OccupancyStatus::NOT_ACCEPTING_PASSENGERS
    }};
};

template <>
size_t enumToOrdinal<::gtfsrealtime::OccupancyStatus>(::gtfsrealtime::OccupancyStatus value);

template <>
::gtfsrealtime::OccupancyStatus valueToEnum<::gtfsrealtime::OccupancyStatus>(
        typename ::std::underlying_type<::gtfsrealtime::OccupancyStatus>::type rawValue);

template <>
uint32_t enumHashCode<::gtfsrealtime::OccupancyStatus>(::gtfsrealtime::OccupancyStatus value);

template <>
void initPackingContext<::zserio::PackingContextNode, ::gtfsrealtime::OccupancyStatus>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::OccupancyStatus value);

template <>
size_t bitSizeOf<::gtfsrealtime::OccupancyStatus>(::gtfsrealtime::OccupancyStatus value);

template <>
size_t bitSizeOf<::zserio::PackingContextNode, ::gtfsrealtime::OccupancyStatus>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::OccupancyStatus value);

template <>
size_t initializeOffsets<::gtfsrealtime::OccupancyStatus>(size_t bitPosition, ::gtfsrealtime::OccupancyStatus value);

template <>
size_t initializeOffsets<::zserio::PackingContextNode, ::gtfsrealtime::OccupancyStatus>(
        ::zserio::PackingContextNode& contextNode, size_t bitPosition, ::gtfsrealtime::OccupancyStatus value);

template <>
::gtfsrealtime::OccupancyStatus read<::gtfsrealtime::OccupancyStatus>(::zserio::BitStreamReader& in);

template <>
::gtfsrealtime::OccupancyStatus read<::gtfsrealtime::OccupancyStatus, ::zserio::PackingContextNode>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in);

template <>
void write<::gtfsrealtime::OccupancyStatus>(::zserio::BitStreamWriter& out, ::gtfsrealtime::OccupancyStatus value);

template <>
void write<::zserio::PackingContextNode, ::gtfsrealtime::OccupancyStatus>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out, ::gtfsrealtime::OccupancyStatus value);

} // namespace zserio

#endif // GTFSREALTIME_OCCUPANCY_STATUS_H
