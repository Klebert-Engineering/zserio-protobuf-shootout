/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_SCHEDULE_RELATIONSHIP_H
#define GTFSREALTIME_SCHEDULE_RELATIONSHIP_H

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace gtfsrealtime
{

enum class ScheduleRelationship : uint8_t
{
    SCHEDULED = UINT8_C(0),
    ADDED = UINT8_C(1),
    UNSCHEDULED = UINT8_C(2),
    CANCELED = UINT8_C(3)
};

} // namespace gtfsrealtime

namespace zserio
{

// This is full specialization of enumeration traits and methods for ScheduleRelationship enumeration.
template <>
struct EnumTraits<::gtfsrealtime::ScheduleRelationship>
{
    static constexpr ::std::array<const char*, 4> names =
    {{
        "SCHEDULED",
        "ADDED",
        "UNSCHEDULED",
        "CANCELED"
    }};

    static constexpr ::std::array<::gtfsrealtime::ScheduleRelationship, 4> values =
    {{
        ::gtfsrealtime::ScheduleRelationship::SCHEDULED,
        ::gtfsrealtime::ScheduleRelationship::ADDED,
        ::gtfsrealtime::ScheduleRelationship::UNSCHEDULED,
        ::gtfsrealtime::ScheduleRelationship::CANCELED
    }};
};

template <>
size_t enumToOrdinal<::gtfsrealtime::ScheduleRelationship>(::gtfsrealtime::ScheduleRelationship value);

template <>
::gtfsrealtime::ScheduleRelationship valueToEnum<::gtfsrealtime::ScheduleRelationship>(
        typename ::std::underlying_type<::gtfsrealtime::ScheduleRelationship>::type rawValue);

template <>
uint32_t enumHashCode<::gtfsrealtime::ScheduleRelationship>(::gtfsrealtime::ScheduleRelationship value);

template <>
void initPackingContext<::zserio::PackingContextNode, ::gtfsrealtime::ScheduleRelationship>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::ScheduleRelationship value);

template <>
size_t bitSizeOf<::gtfsrealtime::ScheduleRelationship>(::gtfsrealtime::ScheduleRelationship value);

template <>
size_t bitSizeOf<::zserio::PackingContextNode, ::gtfsrealtime::ScheduleRelationship>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::ScheduleRelationship value);

template <>
size_t initializeOffsets<::gtfsrealtime::ScheduleRelationship>(size_t bitPosition, ::gtfsrealtime::ScheduleRelationship value);

template <>
size_t initializeOffsets<::zserio::PackingContextNode, ::gtfsrealtime::ScheduleRelationship>(
        ::zserio::PackingContextNode& contextNode, size_t bitPosition, ::gtfsrealtime::ScheduleRelationship value);

template <>
::gtfsrealtime::ScheduleRelationship read<::gtfsrealtime::ScheduleRelationship>(::zserio::BitStreamReader& in);

template <>
::gtfsrealtime::ScheduleRelationship read<::gtfsrealtime::ScheduleRelationship, ::zserio::PackingContextNode>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in);

template <>
void write<::gtfsrealtime::ScheduleRelationship>(::zserio::BitStreamWriter& out, ::gtfsrealtime::ScheduleRelationship value);

template <>
void write<::zserio::PackingContextNode, ::gtfsrealtime::ScheduleRelationship>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out, ::gtfsrealtime::ScheduleRelationship value);

} // namespace zserio

#endif // GTFSREALTIME_SCHEDULE_RELATIONSHIP_H
