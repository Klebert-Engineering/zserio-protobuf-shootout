/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_STOP_TIME_EVENT_H
#define GTFSREALTIME_STOP_TIME_EVENT_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace gtfsrealtime
{

class StopTimeEvent
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit StopTimeEvent(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_delay,
            typename ZSERIO_T_time,
            typename ZSERIO_T_uncertainty,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_delay, StopTimeEvent, allocator_type> = 0>
    StopTimeEvent(
            ZSERIO_T_delay&& delay_,
            ZSERIO_T_time&& time_,
            ZSERIO_T_uncertainty&& uncertainty_,
            const allocator_type& allocator = allocator_type()) :
            StopTimeEvent(allocator)
    {
        m_delay_ = ::std::forward<ZSERIO_T_delay>(delay_);
        m_time_ = ::std::forward<ZSERIO_T_time>(time_);
        m_uncertainty_ = ::std::forward<ZSERIO_T_uncertainty>(uncertainty_);
    }

    explicit StopTimeEvent(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit StopTimeEvent(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~StopTimeEvent() = default;

    StopTimeEvent(const StopTimeEvent&) = default;
    StopTimeEvent& operator=(const StopTimeEvent&) = default;

    StopTimeEvent(StopTimeEvent&&) = default;
    StopTimeEvent& operator=(StopTimeEvent&&) = default;

    StopTimeEvent(::zserio::PropagateAllocatorT,
            const StopTimeEvent& other, const allocator_type& allocator);

    int32_t getDelay() const;
    void setDelay(int32_t delay_);
    bool isDelayUsed() const;
    bool isDelaySet() const;
    void resetDelay();

    int64_t getTime() const;
    void setTime(int64_t time_);
    bool isTimeUsed() const;
    bool isTimeSet() const;
    void resetTime();

    int32_t getUncertainty() const;
    void setUncertainty(int32_t uncertainty_);
    bool isUncertaintyUsed() const;
    bool isUncertaintySet() const;
    void resetUncertainty();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const StopTimeEvent& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<int32_t> readDelay(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readDelay(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int64_t> readTime(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int64_t> readTime(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readUncertainty(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readUncertainty(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);

    ::zserio::InplaceOptionalHolder<int32_t> m_delay_;
    ::zserio::InplaceOptionalHolder<int64_t> m_time_;
    ::zserio::InplaceOptionalHolder<int32_t> m_uncertainty_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_STOP_TIME_EVENT_H
