/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_FEED_ENTITY_H
#define GTFSREALTIME_FEED_ENTITY_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <gtfsrealtime/Alert.h>
#include <gtfsrealtime/TripUpdate.h>
#include <gtfsrealtime/VehiclePosition.h>

namespace gtfsrealtime
{

class FeedEntity
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit FeedEntity(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_id,
            typename ZSERIO_T_trip_update,
            typename ZSERIO_T_vehicle,
            typename ZSERIO_T_alert,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, FeedEntity, allocator_type> = 0>
    FeedEntity(
            ZSERIO_T_id&& id_,
            bool is_deleted_,
            ZSERIO_T_trip_update&& trip_update_,
            ZSERIO_T_vehicle&& vehicle_,
            ZSERIO_T_alert&& alert_,
            const allocator_type& allocator = allocator_type()) :
            FeedEntity(allocator)
    {
        m_id_ = ::std::forward<ZSERIO_T_id>(id_);
        m_is_deleted_ = is_deleted_;
        m_trip_update_ = ::std::forward<ZSERIO_T_trip_update>(trip_update_);
        m_vehicle_ = ::std::forward<ZSERIO_T_vehicle>(vehicle_);
        m_alert_ = ::std::forward<ZSERIO_T_alert>(alert_);
    }

    explicit FeedEntity(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit FeedEntity(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~FeedEntity() = default;

    FeedEntity(const FeedEntity&) = default;
    FeedEntity& operator=(const FeedEntity&) = default;

    FeedEntity(FeedEntity&&) = default;
    FeedEntity& operator=(FeedEntity&&) = default;

    FeedEntity(::zserio::PropagateAllocatorT,
            const FeedEntity& other, const allocator_type& allocator);

    const ::zserio::string<>& getId() const;
    ::zserio::string<>& getId();
    void setId(const ::zserio::string<>& id_);
    void setId(::zserio::string<>&& id_);

    bool getIs_deleted() const;
    void setIs_deleted(bool is_deleted_);

    const ::gtfsrealtime::TripUpdate& getTrip_update() const;
    ::gtfsrealtime::TripUpdate& getTrip_update();
    void setTrip_update(const ::gtfsrealtime::TripUpdate& trip_update_);
    void setTrip_update(::gtfsrealtime::TripUpdate&& trip_update_);
    bool isTrip_updateUsed() const;
    bool isTrip_updateSet() const;
    void resetTrip_update();

    const ::gtfsrealtime::VehiclePosition& getVehicle() const;
    ::gtfsrealtime::VehiclePosition& getVehicle();
    void setVehicle(const ::gtfsrealtime::VehiclePosition& vehicle_);
    void setVehicle(::gtfsrealtime::VehiclePosition&& vehicle_);
    bool isVehicleUsed() const;
    bool isVehicleSet() const;
    void resetVehicle();

    const ::gtfsrealtime::Alert& getAlert() const;
    ::gtfsrealtime::Alert& getAlert();
    void setAlert(const ::gtfsrealtime::Alert& alert_);
    void setAlert(::gtfsrealtime::Alert&& alert_);
    bool isAlertUsed() const;
    bool isAlertSet() const;
    void resetAlert();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const FeedEntity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    bool readIs_deleted(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::TripUpdate> readTrip_update(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::TripUpdate> readTrip_update(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehiclePosition> readVehicle(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehiclePosition> readVehicle(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::Alert> readAlert(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::Alert> readAlert(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::zserio::string<> m_id_;
    bool m_is_deleted_;
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::TripUpdate> m_trip_update_;
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehiclePosition> m_vehicle_;
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::Alert> m_alert_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_FEED_ENTITY_H
