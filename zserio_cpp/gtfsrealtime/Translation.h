/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_TRANSLATION_H
#define GTFSREALTIME_TRANSLATION_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

namespace gtfsrealtime
{

class Translation
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit Translation(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_text,
            typename ZSERIO_T_language,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_text, Translation, allocator_type> = 0>
    Translation(
            ZSERIO_T_text&& text_,
            ZSERIO_T_language&& language_,
            const allocator_type& allocator = allocator_type()) :
            Translation(allocator)
    {
        m_text_ = ::std::forward<ZSERIO_T_text>(text_);
        m_language_ = ::std::forward<ZSERIO_T_language>(language_);
    }

    explicit Translation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Translation(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Translation() = default;

    Translation(const Translation&) = default;
    Translation& operator=(const Translation&) = default;

    Translation(Translation&&) = default;
    Translation& operator=(Translation&&) = default;

    Translation(::zserio::PropagateAllocatorT,
            const Translation& other, const allocator_type& allocator);

    const ::zserio::string<>& getText() const;
    ::zserio::string<>& getText();
    void setText(const ::zserio::string<>& text_);
    void setText(::zserio::string<>&& text_);

    const ::zserio::string<>& getLanguage() const;
    ::zserio::string<>& getLanguage();
    void setLanguage(const ::zserio::string<>& language_);
    void setLanguage(::zserio::string<>&& language_);
    bool isLanguageUsed() const;
    bool isLanguageSet() const;
    void resetLanguage();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const Translation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readText(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readLanguage(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::string<> m_text_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_language_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_TRANSLATION_H
