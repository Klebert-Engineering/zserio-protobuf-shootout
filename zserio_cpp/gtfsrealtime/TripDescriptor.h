/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_TRIP_DESCRIPTOR_H
#define GTFSREALTIME_TRIP_DESCRIPTOR_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <gtfsrealtime/ScheduleRelationship.h>

namespace gtfsrealtime
{

class TripDescriptor
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit TripDescriptor(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_trip_id,
            typename ZSERIO_T_route_id,
            typename ZSERIO_T_direction_id,
            typename ZSERIO_T_start_time,
            typename ZSERIO_T_start_date,
            typename ZSERIO_T_schedule_relationship,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_trip_id, TripDescriptor, allocator_type> = 0>
    TripDescriptor(
            ZSERIO_T_trip_id&& trip_id_,
            ZSERIO_T_route_id&& route_id_,
            ZSERIO_T_direction_id&& direction_id_,
            ZSERIO_T_start_time&& start_time_,
            ZSERIO_T_start_date&& start_date_,
            ZSERIO_T_schedule_relationship&& schedule_relationship_,
            const allocator_type& allocator = allocator_type()) :
            TripDescriptor(allocator)
    {
        m_trip_id_ = ::std::forward<ZSERIO_T_trip_id>(trip_id_);
        m_route_id_ = ::std::forward<ZSERIO_T_route_id>(route_id_);
        m_direction_id_ = ::std::forward<ZSERIO_T_direction_id>(direction_id_);
        m_start_time_ = ::std::forward<ZSERIO_T_start_time>(start_time_);
        m_start_date_ = ::std::forward<ZSERIO_T_start_date>(start_date_);
        m_schedule_relationship_ = ::std::forward<ZSERIO_T_schedule_relationship>(schedule_relationship_);
    }

    explicit TripDescriptor(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TripDescriptor(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TripDescriptor() = default;

    TripDescriptor(const TripDescriptor&) = default;
    TripDescriptor& operator=(const TripDescriptor&) = default;

    TripDescriptor(TripDescriptor&&) = default;
    TripDescriptor& operator=(TripDescriptor&&) = default;

    TripDescriptor(::zserio::PropagateAllocatorT,
            const TripDescriptor& other, const allocator_type& allocator);

    const ::zserio::string<>& getTrip_id() const;
    ::zserio::string<>& getTrip_id();
    void setTrip_id(const ::zserio::string<>& trip_id_);
    void setTrip_id(::zserio::string<>&& trip_id_);
    bool isTrip_idUsed() const;
    bool isTrip_idSet() const;
    void resetTrip_id();

    const ::zserio::string<>& getRoute_id() const;
    ::zserio::string<>& getRoute_id();
    void setRoute_id(const ::zserio::string<>& route_id_);
    void setRoute_id(::zserio::string<>&& route_id_);
    bool isRoute_idUsed() const;
    bool isRoute_idSet() const;
    void resetRoute_id();

    uint32_t getDirection_id() const;
    void setDirection_id(uint32_t direction_id_);
    bool isDirection_idUsed() const;
    bool isDirection_idSet() const;
    void resetDirection_id();

    const ::zserio::string<>& getStart_time() const;
    ::zserio::string<>& getStart_time();
    void setStart_time(const ::zserio::string<>& start_time_);
    void setStart_time(::zserio::string<>&& start_time_);
    bool isStart_timeUsed() const;
    bool isStart_timeSet() const;
    void resetStart_time();

    const ::zserio::string<>& getStart_date() const;
    ::zserio::string<>& getStart_date();
    void setStart_date(const ::zserio::string<>& start_date_);
    void setStart_date(::zserio::string<>&& start_date_);
    bool isStart_dateUsed() const;
    bool isStart_dateSet() const;
    void resetStart_date();

    ::gtfsrealtime::ScheduleRelationship getSchedule_relationship() const;
    void setSchedule_relationship(::gtfsrealtime::ScheduleRelationship schedule_relationship_);
    bool isSchedule_relationshipUsed() const;
    bool isSchedule_relationshipSet() const;
    void resetSchedule_relationship();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const TripDescriptor& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readTrip_id(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readRoute_id(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint32_t> readDirection_id(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint32_t> readDirection_id(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readStart_time(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readStart_date(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::ScheduleRelationship> readSchedule_relationship(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::ScheduleRelationship> readSchedule_relationship(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);

    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_trip_id_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_route_id_;
    ::zserio::InplaceOptionalHolder<uint32_t> m_direction_id_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_start_time_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_start_date_;
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::ScheduleRelationship> m_schedule_relationship_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_TRIP_DESCRIPTOR_H
