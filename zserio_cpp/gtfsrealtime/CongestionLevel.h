/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_CONGESTION_LEVEL_H
#define GTFSREALTIME_CONGESTION_LEVEL_H

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace gtfsrealtime
{

enum class CongestionLevel : uint8_t
{
    UNKNOWN_CONGESTION_LEVEL = UINT8_C(0),
    RUNNING_SMOOTHLY = UINT8_C(1),
    STOP_AND_GO = UINT8_C(2),
    CONGESTION = UINT8_C(3),
    SEVERE_CONGESTION = UINT8_C(4)
};

} // namespace gtfsrealtime

namespace zserio
{

// This is full specialization of enumeration traits and methods for CongestionLevel enumeration.
template <>
struct EnumTraits<::gtfsrealtime::CongestionLevel>
{
    static constexpr ::std::array<const char*, 5> names =
    {{
        "UNKNOWN_CONGESTION_LEVEL",
        "RUNNING_SMOOTHLY",
        "STOP_AND_GO",
        "CONGESTION",
        "SEVERE_CONGESTION"
    }};

    static constexpr ::std::array<::gtfsrealtime::CongestionLevel, 5> values =
    {{
        ::gtfsrealtime::CongestionLevel::UNKNOWN_CONGESTION_LEVEL,
        ::gtfsrealtime::CongestionLevel::RUNNING_SMOOTHLY,
        ::gtfsrealtime::CongestionLevel::STOP_AND_GO,
        ::gtfsrealtime::CongestionLevel::CONGESTION,
        ::gtfsrealtime::CongestionLevel::SEVERE_CONGESTION
    }};
};

template <>
size_t enumToOrdinal<::gtfsrealtime::CongestionLevel>(::gtfsrealtime::CongestionLevel value);

template <>
::gtfsrealtime::CongestionLevel valueToEnum<::gtfsrealtime::CongestionLevel>(
        typename ::std::underlying_type<::gtfsrealtime::CongestionLevel>::type rawValue);

template <>
uint32_t enumHashCode<::gtfsrealtime::CongestionLevel>(::gtfsrealtime::CongestionLevel value);

template <>
void initPackingContext<::zserio::PackingContextNode, ::gtfsrealtime::CongestionLevel>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::CongestionLevel value);

template <>
size_t bitSizeOf<::gtfsrealtime::CongestionLevel>(::gtfsrealtime::CongestionLevel value);

template <>
size_t bitSizeOf<::zserio::PackingContextNode, ::gtfsrealtime::CongestionLevel>(
        ::zserio::PackingContextNode& contextNode, ::gtfsrealtime::CongestionLevel value);

template <>
size_t initializeOffsets<::gtfsrealtime::CongestionLevel>(size_t bitPosition, ::gtfsrealtime::CongestionLevel value);

template <>
size_t initializeOffsets<::zserio::PackingContextNode, ::gtfsrealtime::CongestionLevel>(
        ::zserio::PackingContextNode& contextNode, size_t bitPosition, ::gtfsrealtime::CongestionLevel value);

template <>
::gtfsrealtime::CongestionLevel read<::gtfsrealtime::CongestionLevel>(::zserio::BitStreamReader& in);

template <>
::gtfsrealtime::CongestionLevel read<::gtfsrealtime::CongestionLevel, ::zserio::PackingContextNode>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in);

template <>
void write<::gtfsrealtime::CongestionLevel>(::zserio::BitStreamWriter& out, ::gtfsrealtime::CongestionLevel value);

template <>
void write<::zserio::PackingContextNode, ::gtfsrealtime::CongestionLevel>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out, ::gtfsrealtime::CongestionLevel value);

} // namespace zserio

#endif // GTFSREALTIME_CONGESTION_LEVEL_H
