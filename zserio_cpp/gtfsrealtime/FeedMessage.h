/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_FEED_MESSAGE_H
#define GTFSREALTIME_FEED_MESSAGE_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <gtfsrealtime/FeedEntity.h>
#include <gtfsrealtime/FeedHeader.h>

namespace gtfsrealtime
{

class FeedMessage
{
private:
    class ZserioElementFactory_entity
    {
    public:
        explicit ZserioElementFactory_entity(FeedMessage& owner);

        void create(::zserio::vector<::gtfsrealtime::FeedEntity>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

        void create(::zserio::PackingContextNode& contextNode,
                ::zserio::vector<::gtfsrealtime::FeedEntity>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

    private:
        std::reference_wrapper<FeedMessage> m_ownerRef;
    };

    using ZserioArrayType_entity = ::zserio::Array<::zserio::vector<::gtfsrealtime::FeedEntity>, ::zserio::ObjectArrayTraits<::gtfsrealtime::FeedEntity, ZserioElementFactory_entity>, ::zserio::ArrayType::AUTO>;

public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit FeedMessage(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_header,
            typename ZSERIO_T_entity,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, FeedMessage, allocator_type> = 0>
    FeedMessage(
            ZSERIO_T_header&& header_,
            ZSERIO_T_entity&& entity_,
            const allocator_type& allocator = allocator_type()) :
            FeedMessage(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_entity_ = ZserioArrayType_entity(::std::forward<ZSERIO_T_entity>(entity_), ::zserio::ObjectArrayTraits<::gtfsrealtime::FeedEntity, ZserioElementFactory_entity>());
    }

    explicit FeedMessage(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit FeedMessage(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~FeedMessage() = default;

    FeedMessage(const FeedMessage&) = default;
    FeedMessage& operator=(const FeedMessage&) = default;

    FeedMessage(FeedMessage&&) = default;
    FeedMessage& operator=(FeedMessage&&) = default;

    FeedMessage(::zserio::PropagateAllocatorT,
            const FeedMessage& other, const allocator_type& allocator);

    const ::gtfsrealtime::FeedHeader& getHeader() const;
    ::gtfsrealtime::FeedHeader& getHeader();
    void setHeader(const ::gtfsrealtime::FeedHeader& header_);
    void setHeader(::gtfsrealtime::FeedHeader&& header_);

    const ::zserio::vector<::gtfsrealtime::FeedEntity>& getEntity() const;
    ::zserio::vector<::gtfsrealtime::FeedEntity>& getEntity();
    void setEntity(const ::zserio::vector<::gtfsrealtime::FeedEntity>& entity_);
    void setEntity(::zserio::vector<::gtfsrealtime::FeedEntity>&& entity_);

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const FeedMessage& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::gtfsrealtime::FeedHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::gtfsrealtime::FeedHeader readHeader(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_entity readEntity(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_entity readEntity(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::gtfsrealtime::FeedHeader m_header_;
    ZserioArrayType_entity m_entity_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_FEED_MESSAGE_H
