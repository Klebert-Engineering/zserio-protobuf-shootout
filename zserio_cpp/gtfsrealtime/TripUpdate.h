/**
 * Automatically generated by Zserio C++ extension version 2.9.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef GTFSREALTIME_TRIP_UPDATE_H
#define GTFSREALTIME_TRIP_UPDATE_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <gtfsrealtime/StopTimeUpdate.h>
#include <gtfsrealtime/TripDescriptor.h>
#include <gtfsrealtime/VehicleDescriptor.h>

namespace gtfsrealtime
{

class TripUpdate
{
private:
    class ZserioElementFactory_stop_time_update
    {
    public:
        explicit ZserioElementFactory_stop_time_update(TripUpdate& owner);

        void create(::zserio::vector<::gtfsrealtime::StopTimeUpdate>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

        void create(::zserio::PackingContextNode& contextNode,
                ::zserio::vector<::gtfsrealtime::StopTimeUpdate>& array,
                ::zserio::BitStreamReader& in, size_t index) const;

    private:
        std::reference_wrapper<TripUpdate> m_ownerRef;
    };

    using ZserioArrayType_stop_time_update = ::zserio::Array<::zserio::vector<::gtfsrealtime::StopTimeUpdate>, ::zserio::ObjectArrayTraits<::gtfsrealtime::StopTimeUpdate, ZserioElementFactory_stop_time_update>, ::zserio::ArrayType::AUTO>;

public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit TripUpdate(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_trip,
            typename ZSERIO_T_vehicle,
            typename ZSERIO_T_stop_time_update,
            typename ZSERIO_T_timestamp,
            typename ZSERIO_T_delay,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_trip, TripUpdate, allocator_type> = 0>
    TripUpdate(
            ZSERIO_T_trip&& trip_,
            ZSERIO_T_vehicle&& vehicle_,
            ZSERIO_T_stop_time_update&& stop_time_update_,
            ZSERIO_T_timestamp&& timestamp_,
            ZSERIO_T_delay&& delay_,
            const allocator_type& allocator = allocator_type()) :
            TripUpdate(allocator)
    {
        m_trip_ = ::std::forward<ZSERIO_T_trip>(trip_);
        m_vehicle_ = ::std::forward<ZSERIO_T_vehicle>(vehicle_);
        m_stop_time_update_ = ZserioArrayType_stop_time_update(::std::forward<ZSERIO_T_stop_time_update>(stop_time_update_), ::zserio::ObjectArrayTraits<::gtfsrealtime::StopTimeUpdate, ZserioElementFactory_stop_time_update>());
        m_timestamp_ = ::std::forward<ZSERIO_T_timestamp>(timestamp_);
        m_delay_ = ::std::forward<ZSERIO_T_delay>(delay_);
    }

    explicit TripUpdate(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TripUpdate(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TripUpdate() = default;

    TripUpdate(const TripUpdate&) = default;
    TripUpdate& operator=(const TripUpdate&) = default;

    TripUpdate(TripUpdate&&) = default;
    TripUpdate& operator=(TripUpdate&&) = default;

    TripUpdate(::zserio::PropagateAllocatorT,
            const TripUpdate& other, const allocator_type& allocator);

    const ::gtfsrealtime::TripDescriptor& getTrip() const;
    ::gtfsrealtime::TripDescriptor& getTrip();
    void setTrip(const ::gtfsrealtime::TripDescriptor& trip_);
    void setTrip(::gtfsrealtime::TripDescriptor&& trip_);

    const ::gtfsrealtime::VehicleDescriptor& getVehicle() const;
    ::gtfsrealtime::VehicleDescriptor& getVehicle();
    void setVehicle(const ::gtfsrealtime::VehicleDescriptor& vehicle_);
    void setVehicle(::gtfsrealtime::VehicleDescriptor&& vehicle_);
    bool isVehicleUsed() const;
    bool isVehicleSet() const;
    void resetVehicle();

    const ::zserio::vector<::gtfsrealtime::StopTimeUpdate>& getStop_time_update() const;
    ::zserio::vector<::gtfsrealtime::StopTimeUpdate>& getStop_time_update();
    void setStop_time_update(const ::zserio::vector<::gtfsrealtime::StopTimeUpdate>& stop_time_update_);
    void setStop_time_update(::zserio::vector<::gtfsrealtime::StopTimeUpdate>&& stop_time_update_);

    uint64_t getTimestamp() const;
    void setTimestamp(uint64_t timestamp_);
    bool isTimestampUsed() const;
    bool isTimestampSet() const;
    void resetTimestamp();

    int32_t getDelay() const;
    void setDelay(int32_t delay_);
    bool isDelayUsed() const;
    bool isDelaySet() const;
    void resetDelay();

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const TripUpdate& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::gtfsrealtime::TripDescriptor readTrip(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::gtfsrealtime::TripDescriptor readTrip(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehicleDescriptor> readVehicle(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehicleDescriptor> readVehicle(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_stop_time_update readStop_time_update(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_stop_time_update readStop_time_update(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint64_t> readTimestamp(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readTimestamp(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readDelay(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int32_t> readDelay(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);

    ::gtfsrealtime::TripDescriptor m_trip_;
    ::zserio::InplaceOptionalHolder<::gtfsrealtime::VehicleDescriptor> m_vehicle_;
    ZserioArrayType_stop_time_update m_stop_time_update_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_timestamp_;
    ::zserio::InplaceOptionalHolder<int32_t> m_delay_;
};

} // namespace gtfsrealtime

#endif // GTFSREALTIME_TRIP_UPDATE_H
